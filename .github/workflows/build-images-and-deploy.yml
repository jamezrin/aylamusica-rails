name: Build Images and Deploy to Personal Registry

on:
  push:
    branches: [master]

concurrency:
  group: build-images
  cancel-in-progress: true

env:
  REGISTRY: harbor.jamezrin.name

jobs:
  build-packages:
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: true
      matrix:
        platform: ['amd64', 'arm64']
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            runner: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: Login to my Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: Create docker context
        run: docker context create builders
      - uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
          endpoint: builders
      - name: Compute image variables
        id: compute_vars
        run: |
          version="$GITHUB_RUN_NUMBER"
          image_name="${{ env.REGISTRY }}/aylamusica/aylamusica-rails"
          full_image_tag="${image_name}:${version}-${{ matrix.platform }}"
          echo "::set-output name=full_image_tag::${full_image_tag}"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ steps.compute_vars.outputs.full_image_tag }}

  create-manifest:
    needs: [build-packages]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to my Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: Build manifests
        run: |
          version="$GITHUB_RUN_NUMBER"
          image_name="${{ env.REGISTRY }}/aylamusica/aylamusica-rails"
          
          echo "Creating manifest for ${version} tag"
          docker manifest create ${image_name}:${version} \
            --amend ${image_name}:${version}-arm64 \
            --amend ${image_name}:${version}-amd64
          docker manifest push ${image_name}:${version}

          echo "Creating manifest for latest tag"
          docker manifest create ${image_name}:latest \
            --amend ${image_name}:${version}-arm64 \
            --amend ${image_name}:${version}-amd64
          docker manifest push ${image_name}:latest